import AppError from "../utilities/appError.js";
const handleCastError = (err) => {
  const message = `${err.path}: invalid ${err.value._id}`;
  return new AppError(message, 400);
};
const handleDuplicateFieldDB = () => {
  const message = "duplicate field value, please use the different name.";
  return new AppError(message, 400);
};
const errorController = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";
  //printing different error messages for development and production
  if (process.env.NODE_ENV === "development") {
    res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack,
    });
  } else if (process.env.NODE_ENV === "production") {
    let error = { ...err };

    //checking for the cast error and changing to operational error.

    if (err.name === "CastError") {
      error = handleCastError(error);
    }
    //checking for mongoServerError from duplicate name field.

    if (err.code === 11000) {
      error = handleDuplicateFieldDB();
    }

    if (error.isOperational) {
      //operational errors are error generated by us.
      res.status(error.statusCode).json({
        status: error.status,
        message: error.message,
      });
    } else {
      // log the error
      console.error("errorðŸ’¥", err);
      // send generic message
      res
        .status(500)
        .json({ status: "error", message: "Something went very wrong" });
    }
  }
};

export default errorController;
